@{
    ViewData["Title"] = "Playing";
}
@using Chess_API.Enums
@using Chess_API.utils
@model Chess_API.Models.GameModel


<!--TODO - create a selection algorithm for selection of fields -> implement in the view-->
<!--TODO - use Periodic timer for ticking down the clocks of the single players; let the player select a time option -> sets number of seconds -> will be ticked down-->
<!-- https://www.youtube.com/watch?v=N7vhJ7O56iM -->
<!-- you can use timespan as time prop -->
<!-- TODO - Rotate the board 180 deg for each players turn + White should be at the bottom for the start -->
<!-- Maybe rearrange the whole field data structure -> just put every row on its opposite position  -->

<main class="w-screen p-5 h-full grid grid-rows-4 grid-cols-1 xl:grid-rows-1 xl:grid-cols-4 pb-[116px] sm:pb-[84px] xl:pb-0">
    <!-- player one dashboard -->
    <div class="row-span-1 xl:col-span-1 h-full w-full flex items-center justify-center xl:justify-end">
        <div class="h-4/5 xl:h-full w-3/5 rounded-xl bg-white grid grid-rows-1 grid-cols-4 xl:grid-cols-1 xl:grid-rows-4">
            <!-- name -->
            <div class="col-span-1 w-full flex items-center justify-center border-r-4 xl:border-r-0 xl:border-b-4 border-black border-double">
                <p class="text-center text-xl font-sans font-semibold w-full p-2">@Model.PlayerOne.Name</p>
            </div>
            <div class="col-span-3 xl:row-span-3 grid grid-row-2 xl:grid-rows-3 grid-cols-2 xl:grid-cols-1 w-full h-full">
                <!-- time --> 
                <div class="col-span-1 xl:row-span-1 w-full flex items-center justify-center">
                    @if (Model.PlayerOne.StartingTime is null)
                    {
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">--:--:--</p>
                    }
                    else
                    {
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">@Model.PlayerOne.StartingTime</p>
                    }
                </div>
                <!-- pieces -->
                <div class="row-span-2 xl:row-span-1 w-full flex items-start justify-center">
                    <div class="w-full flex flex-col items-center justify-around p-4">
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">Pieces</p>
                        @if (Model.PlayerOne.Pieces is not null)
                        {
                        <div class="flex gap-2">
                            @foreach (var piece in Model.PlayerOne.Pieces)
                            {
                            <img class="size-12 aspect-square" alt="A thrown piece" src=@piece.PictureSource/>
                            }
                        </div>
                        }
                    </div>
                </div>
                <!-- Score -->
                <div class="col-span-1 xl:row-span-1 w-full flex items-center justify-center">
                    @switch (Model.PlayerOne.Score)
                    {
                    case 0:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        No games won
                    </p>
                    break;
                    case 1:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        One won game
                    </p>
                    break;
                    default:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        @Model.PlayerOne.Score
                    </p>
                    break;
                    }
                </div>
            </div>   
        </div>
    </div>
    
    <!--game board-->
    <div class="row-span-2 xl:col-span-2 w-full h-auto flex flex-col items-center justify-center">
        <!-- TODO - Find out to send the clicked field coordinates to the controller endpoint -> https://stackoverflow.com/questions/62523590/asp-net-core-how-to-pass-listint-from-view-to-controller-->
        <div class="p-3 border-4 border-black rounded-lg bg-blue-950 aspect-square w-4/5">
            @foreach (var row in Model.Board)
            {
                <div class="w-full h-fit my-0 flex items-center justify-center">
                    @foreach (var field in row.Row)
                    {
                        <!--TODO - when player clicks a field with a figure on it mark these fields who are selected -> where the figure can go!-->
                            @switch (field.Color)
                            {
                                case Colors.White when field.Content is { PictureSource: not null }:
                                    <form action="/playing/move" method="post" class="aspect-square w-[12.5%] bg-white border-1 border-black focus:border-white m-1 flex items-center justify-center">
                                        <button
                                            class="aspect-square w-full"
                                            type="submit">
                                            <img src=@field.Content.PictureSource alt="none" class="w-fit h-fit"/>
                                        </button>
                                        <input type="hidden" id="fieldCoordinates" name="fieldCoordinates"
                                               value=@ConverterHelper.ConvertIntsListToString(new List<int>() { field.X, field.Y })>
                                    </form>
                                    break;
                                case Colors.White:
                                    <form action="/playing/move" method="post" class="aspect-square w-[12.5%] bg-white border-1 border-black focus:border-white m-1">
                                        <button type="submit"
                                                class="aspect-square w-full"></button>
                                        <input type="hidden" id="fieldCoordinates" name="fieldCoordinates"
                                               value=@ConverterHelper.ConvertIntsListToString(new List<int>() { field.X, field.Y })>
                                    </form>
                                    break;
                                case Colors.Black when field.Content is { PictureSource: not null }:
                                    <form action="/playing/move" method="post" class="aspect-square w-[12.5%] bg-slate-500 border-1 border-black focus:border-white m-1 flex items-center justify-center">
                                        <button type="submit"
                                                class=" m-1 aspect-square w-full">
                                            <img src=@field.Content.PictureSource alt="none" class="w-fit h-fit"/>
                                        </button>
                                        <input type="hidden" id="fieldCoordinates" name="fieldCoordinates"
                                               value=@ConverterHelper.ConvertIntsListToString(new List<int>() { field.X, field.Y })>
                                    </form>
                                    break;
                                case Colors.Black:
                                    <form action="/playing/move" method="post" class="aspect-square w-[12.5%] bg-slate-500 border-1 border-black focus:border-white m-1">
                                        <button type="submit"
                                                class="aspect-square w-full"></button>
                                        <input type="hidden" id="fieldCoordinates" name="fieldCoordinates"
                                               value=@ConverterHelper.ConvertIntsListToString(new List<int>() {field.X, field.Y})>
                                    </form>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                    }
                </div>
            }
        </div>
        <!-- TODO - Wrap the Resign and Draw button into a form -->
        <!-- resign and draw defeat -->
        <div class="w-full h-auto flex items-center justify-center gap-4">
            <!-- Resign -->
            <button class="p-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" role="img" viewBox="0 0 24 24" stroke-width="1.5"
                     stroke="currentColor" class="size-14 aspect-square text-white transition-all duration-500 hover:text-slate-500">
                    <path stroke-linecap="round" stroke-linejoin="round"
                          d="M3 3v1.5M3 21v-6m0 0 2.77-.693a9 9 0 0 1 6.208.682l.108.054a9 9 0 0 0 6.086.71l3.114-.732a48.524 48.524 0 0 1-.005-10.499l-3.11.732a9 9 0 0 1-6.085-.711l-.108-.054a9 9 0 0 0-6.208-.682L3 4.5M3 15V4.5"/>
                </svg>
            </button>
            <!-- Draw / Remi -->
            <button class="p-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5"
                     stroke="currentColor" class="size-14 aspect-square text-white transition-all duration-500 hover:text-slate-500">
                    <path stroke-linecap="round" stroke-linejoin="round"
                          d="M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z"/>
                </svg>
            </button>
        </div>
    </div>
    
    <!-- player two -->
    <div class="row-span-1 xl:col-span-1 h-full w-full flex items-center justify-center xl:justify-start">
        <!-- h-4/5 xl:h-full w-3/5 rounded-xl bg-white grid grid-rows-1 grid-cols-4 xl:grid-cols-1 xl:grid-rows-4 -->
        <!-- h-full w-3/5 rounded-xl bg-white grid grid-cols-1 grid-rows-4 -->
        <div class="h-4/5 xl:h-full w-3/5 rounded-xl bg-white grid grid-rows-1 grid-cols-4 xl:grid-cols-1 xl:grid-rows-4">
            <!-- name -->
            <div class="col-span-1 w-full flex items-center justify-center border-r-4 xl:border-r-0 xl:border-b-4 border-black border-double">
                <p class="text-center text-xl font-sans font-semibold w-full p-2">@Model.PlayerTwo.Name</p>
            </div>
            <div class="col-span-3 xl:row-span-3 grid grid-row-2 xl:grid-rows-3 grid-cols-2 xl:grid-cols-1 w-full h-full">
                <!-- time -->
                <div class="col-span-1 xl:row-span-1 w-full flex items-center justify-center">
                    @if (Model.PlayerTwo.StartingTime is null)
                    {
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">--:--:--</p>
                    }
                    else
                    {
                        @* <p class="text-center text-xl font-sans font-semibold w-full p-2">@Model.PlayerTwo.Seconds</p> *@
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">@Model.PlayerTwo.StartingTime</p>
                    }
                </div>
                
                <!-- pieces -->
                <div class="row-span-2 xl:row-span-1 w-full flex items-start justify-center">
                    <div class="w-full flex flex-col items-center justify-around p-4">
                        <p class="text-center text-xl font-sans font-semibold w-full p-2">Pieces</p>
                        @if (Model.PlayerTwo.Pieces is not null)
                        {
                            <div class="flex gap-2">
                                @foreach (var piece in Model.PlayerTwo.Pieces)
                                {
                                    <img class="size-12 aspect-square" alt="A thrown piece" src=@piece.PictureSource/>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Score -->
                <div class="col-span-1 xl:row-span-1 w-full flex items-center justify-center">
                    @switch (Model.PlayerTwo.Score)
                    {
                    case 0:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        No games won
                    </p>
                    break;
                    case 1:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        One won game
                    </p>
                    break;
                    default:
                    <p class="text-center text-xl font-sans font-semibold w-full p-2">
                        @Model.PlayerTwo.Score
                    </p>
                    break;
                    }
                </div>
            </div>
        </div>
    </div>
</main>